#!/bin/bash

ln -s /opt/bitnami/keycloak/bin/kcadm.sh /usr/local/bin/kcadm

kcadm config credentials --server $KEYCLOAK_TARGET_SERVER --realm $KEYCLOAK_ADMIN_REALM --user $KEYCLOAK_ADMIN --password $KEYCLOAK_ADMIN_PASSWORD

# Create realm
kcadm create realms -s realm='{{service.realm.name}}' -s enabled=true

{# Blank line -#}
{%- if service.roles | length > 0 -%}
# Create roles
{%- for role in service.roles %}
{%- if role.client is undefined %}
kcadm create roles -r '{{service.realm.name}}' -s name='{{role.name}}' -o
{%- endif -%}
{%- endfor %}
{%- endif %}

{# Blank line -#}
{%- if service.groups | length > 0 -%}
# Create groups
{%- for group in service.groups %}
kcadm create groups -r '{{service.realm.name}}' -s name='{{group.name}}'
{%- endfor %}
{%- endif %}

{# Blank line -#}
{%- if service.users | length > 0 -%}
# Create users
{%- for user in service.users %}
kcadm create users -r '{{service.realm.name}}' -s username='{{user.username}}' -s email='{{user.email}}' -s enabled=true -s emailVerified=true
kcadm set-password -r '{{service.realm.name}}' --username '{{user.username}}' --new-password '{{user.password}}'
{%- endfor %}
{%- endif %}

{# Blank line -#}
{%- if service.clients | length > 0 -%}
# Create clients
{%- for client in service.clients %}
kcadm create clients -r '{{service.realm.name}}'  -f - << EOF
  {
    "clientId": "{{client.name}}",
    "rootUrl": "",
    "adminUrl": "",
    "baseUrl": "",
    "surrogateAuthRequired": false,
    "enabled": true,
    "alwaysDisplayInConsole": true,
    "clientAuthenticatorType": "client-secret",
    "secret": "{{client.secret}}",
    "redirectUris": ["*"],
    "webOrigins": ["*"],
    "bearerOnly": false,
    "consentRequired": false,
    "standardFlowEnabled": true,
    "implicitFlowEnabled": false,
    "directAccessGrantsEnabled": true,
    "serviceAccountsEnabled": true,
    "publicClient": false,
    "frontchannelLogout": true,
    "protocol": "openid-connect",
    "defaultClientScopes" : [ "web-origins", "acr", "roles", "profile", "email", "basic" ],
    "optionalClientScopes" : [ "address", "phone", "offline_access", "microprofile-jwt" ]
  }
EOF
{%- endfor %}
{%- endif %}

{# Blank line -#}
{%- if service.grants | length > 0 -%}
# Grant roles
{%- for grant in service.grants %}
{%- if grant.kind == 'group' %}
kcadm add-roles -r '{{service.realm.name}}' --gname '{{grant.group}}' --rolename '{{grant.role}}'
{%- elif grant.kind == 'user' %}
kcadm add-roles -r '{{service.realm.name}}' --uusername '{{grant.username}}' --rolename '{{grant.role}}'
{%- endif -%}
{%- endfor %}
{%- endif %}

{# Blank line -#}
{%- if service.members | length > 0 -%}
# Add users to groups
function add_user_to_group {
  local member_user=$1
  local member_group=$2
  local member_user_id=$(kcadm get users -r '{{service.realm.name}}' -q exact=true -q username="$member_user" --fields 'id' --format csv | tr -d '"')
  local member_group_id=$(kcadm get group-by-path/$member_group -r '{{service.realm.name}}' --fields 'id' --format csv | tr -d '"')
  if [[ ! -z $member_group_id && ! -z $member_user_id ]]; then
    echo "Add user with id=$member_user_id ($member_user) to a group with id=$member_group_id ($member_group)"
    kcadm update -r '{{service.realm.name}}' users/$member_user_id/groups/$member_group_id
  fi
}

{%- for member in service.members %}
add_user_to_group '{{member.username}}' '{{member.group}}'
{%- endfor %}
{%- endif %}
